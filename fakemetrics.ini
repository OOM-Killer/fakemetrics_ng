
[modules]
# timers: realtime, backfill, flexible
timer = flexible

# data generators: simple, keychanger
data-gen = keychanger

# outputs: carbon
output = carbon


### TIMERS ###

# simple timer where all intervals are the same for all agents
[realtime]

# metric generation interval
interval = 1000

# similar to realtime, but starts counting in the past and runs in fast-forward
[backfill]

# metric generation interval
interval = 1000

# how far in the past to start
start-offset = 12hours

# flexible timer that allows each agent to run at a different interval
[flexible]

# maximum metric interval
max-interval = 5000

# minimum metric interval
min-interval = 100

# if true each agent will get a random interval within the configured range
# if false the agent intervals will be evenly spread through the range
random-distribution = true


### DATA GENERATORS ###

# simple is very basic and always produces X metrics per interval
[simple]

# metric key prefix
key-prefix = this.is.a.test

# number of metrics to generate per interval
key-count = 100

# keychanger is a datagen that changes the keys of generated data over time
[keychanger]

# how many metric points should be created per key
points-per-key = 10

# how many metrics should be sent per interval
key-count = 10

# the metric key prefix
key-prefix = a.test2.

# if true, all the keys will change at the same time.
# otherwise the changing is distributed over intervals
sync-switch = false


### OUTPUTS ###

# carbon writes to a carbon output
[carbon]

host = 192.168.56.101
port = 2003

# flush interval of the write buffer
flush-interval = 100

# max number of metrics to write per flush
metrics-per-flush = 10

# the size of the write buffer in number of metrics it can hold
write-buffer-size = 1000

# if true the writes will block if carbon or the network is slow,
# if false metrics will be skipped when the consumer isn't fast enough
block-on-write = true

# configures the creation of agents
[multiagent]

# number of agents to create
agent-count = 3

# configures a time offset in the creation of agents
# none: no offset
# even: evenly spread the offsets over the time span of one metric interval
# random: use random offsets between 0 and one metric interval
offsets = random

# increase the count of agents slowly instead of creating all at once
slow-increase = true

# interval of launching new agents when slow-increase is on
launch-interval = 1000
